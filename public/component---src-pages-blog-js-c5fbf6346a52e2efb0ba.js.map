{"version":3,"sources":["webpack:///./src/components/menu.js","webpack:///./src/pages/blog.js"],"names":["Menu","current","query","menuQuery","render","data","console","log","tags","tagsGroup","group","className","href","data-hover","map","tag","Fragment","key","fieldValue","defaultProps","Blog","this","props","siteTitle","site","siteMetadata","title","posts","allMdx","edges","location","style","margin","columns","columnGap","padding","node","frontmatter","fields","slug","img","thumbnail","height","background","position","display","overflow","width","minHeight","breakInside","src","alt","color","fontFamily","fontSize","marginTop","marginBottom","rhythm","boxShadow","to","date","description","excerpt","clear","React","Component","pageQuery"],"mappings":"4IAIA,SAASA,EAAKC,GACZ,OACE,kBAAC,cAAD,CACEC,MAAOC,EACPC,OAAQ,SAAAC,GACNC,QAAQC,IAAIN,GACZ,IAAMO,EAAOH,EAAKI,UAAUC,MAC5B,OACE,yBAAKC,UAAU,gBACb,uBAAGC,KAAK,SAASC,aAAW,SAC1B,wCAEDL,EAAKM,KAAI,SAACC,GAAD,OACV,kBAAC,IAAMC,SAAP,CAAgBC,IAAKF,EAAIG,YACvB,uBAAGP,UAAWV,EAAQA,UAAYc,EAAIG,WAAa,SAAU,GAAIN,KAAI,SAAWG,EAAIG,WAAcL,aAAYE,EAAIG,YAChH,8BAAOH,EAAIG,mBAbvB,SAuBJ,IAAMf,EAAS,aAUfH,EAAKmB,aAAe,CAClBlB,QAAQ,IAOKD,O,4KCtCToB,E,gLACJhB,OAAA,WAAU,IACAC,EAASgB,KAAKC,MAAdjB,KACFkB,EAAYlB,EAAKmB,KAAKC,aAAaC,MACnCC,EAAQtB,EAAKuB,OAAOC,MAE1B,OACE,kBAAC,IAAD,CAAQC,SAAUT,KAAKC,MAAMQ,SAAUJ,MAAOH,GAC5C,kBAAC,IAAD,CAAKG,MAAM,cACX,kBAAC,IAAD,MACA,yBAAKK,MAAO,CACVC,OAAQ,cACRC,QAAS,EACTC,UAAW,EACXC,QAAS,IAERR,EAAMb,KAAI,YAAe,IAAZsB,EAAW,EAAXA,KACNV,EAAQU,EAAKC,YAAYX,OAASU,EAAKE,OAAOC,KAC9CC,EAAG,IAAOJ,EAAKC,YAAYI,UACjC,OACE,yBAAKxB,IAAKmB,EAAKE,OAAOC,KAAMR,MAAO,CACjCW,OAAQ,OACRC,WAAY,UACZC,SAAU,WACVC,QAAS,QACTC,SAAU,SACVC,MAAO,OACPC,UAAW,IACXC,YAAa,UAEb,4BAAQtC,UAAU,gBAChB,yBAAKuC,IAAKV,EAAKW,IAAI,UACnB,oCACE,wBACApB,MAAO,CACLY,WAAY,kBACZS,MAAO,OACPC,WAAY,0BACZC,SAAU,OACVnB,QAAS,QACToB,UAAW,EACXC,aAAcC,YAAO,EAAI,KAGzB,kBAAC,OAAD,CACE1B,MAAO,CAAE2B,UAAU,OAASN,MAAO,QACnCO,GAAE,OAASvB,EAAKE,OAAOC,MAEtBb,IAGL,6BACE,2BAAIU,EAAKC,YAAYuB,MACrB,2BAAIxB,EAAKC,YAAYwB,aAAezB,EAAK0B,SACzC,2BAAG,uBAAGlD,KAAI,OAASwB,EAAKE,OAAOC,MAA5B,wCAOf,yBAAKR,MAAO,CAACgC,MAAO,a,GA7DXC,IAAMC,WAoEV7C,YAER,IAAM8C,EAAS,c","file":"component---src-pages-blog-js-c5fbf6346a52e2efb0ba.js","sourcesContent":["import React from \"react\"\nimport { StaticQuery,graphql } from \"gatsby\"\nimport PropTypes from \"prop-types\"\n\nfunction Menu(current) {\n  return (\n    <StaticQuery\n      query={menuQuery}\n      render={data => {\n        console.log(current)\n        const tags = data.tagsGroup.group;\n        return (\n          <nav className=\"cl-effect-10\">\n            <a href=\"/blog/\" data-hover=\"Todos\">\n              <span>Todos</span>\n            </a>\n            {tags.map((tag) => (\n            <React.Fragment key={tag.fieldValue}>\n              <a className={current.current === tag.fieldValue ? 'active': ''} href={`/tags/${tag.fieldValue}`} data-hover={tag.fieldValue}>\n                <span>{tag.fieldValue}</span>\n              </a>\n            </React.Fragment>\n            ))}\n          </nav>\n        );\n      }}\n    />\n  )\n}\nconst menuQuery = graphql`\n  query MenuQuery {\n    tagsGroup: allMdx(limit: 2000) {\n      group(field: frontmatter___tags) {\n        fieldValue\n      }\n    }\n  }\n`\n\nMenu.defaultProps = {\n  current: ``,\n}\n\nMenu.propTypes = {\n  current: PropTypes.string,\n}\n\nexport default Menu;\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\nimport Menu from \"../components/menu\"\n\n\nclass Blog extends React.Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allMdx.edges\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title=\"All posts\" />\n        <Menu/>\n        <div style={{ \n          margin: \"20px 0 40px\",\n          columns: 4,\n          columnGap: 5,\n          padding: 5,\n          }}>\n          {posts.map(({ node }) => {\n            const title = node.frontmatter.title || node.fields.slug;\n            const img = `/${node.frontmatter.thumbnail}` // ? node.frontmatter.thumbnail.childImageSharp.fluid.src : '';\n            return (\n              <div key={node.fields.slug} style={{\n                height: 'auto',\n                background: '#2f3238',\n                position: 'relative',\n                display: 'block',\n                overflow: 'hidden',\n                width: '100%',\n                minHeight: 200,\n                breakInside: 'avoid',\n              }}>\n                <figure className=\"effect-julia\">\n                  <img src={img} alt=\"img21\"/>\n                  <figcaption>\n                    <h3\n                    style={{\n                      background: 'rgba(0,0,0,0.4)',\n                      color: '#fff',\n                      fontFamily: 'vtc_letterer_proregular',\n                      fontSize: '22px',\n                      padding: '0.5em',\n                      marginTop: 0,\n                      marginBottom: rhythm(1 / 4),\n                    }}\n                    >\n                      <Link\n                        style={{ boxShadow: `none`, color: '#fff' }}\n                        to={`blog${node.fields.slug}`}\n                      >\n                        {title}\n                      </Link>\n                    </h3>\n                    <div>\n                      <p>{node.frontmatter.date}</p>\n                      <p>{node.frontmatter.description || node.excerpt}</p>\n                      <p><a href={`blog${node.fields.slug}`}>Would you like to know more?</a></p>\n                    </div>\n                  </figcaption>\t\t\t\n                </figure>\n              </div>\n            )\n          })}\n          <div style={{clear: 'both'}}></div>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport default Blog\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            thumbnail\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}